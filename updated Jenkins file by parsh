pipeline {

    agent any

    tools {

        jdk 'jdk17'

        nodejs 'node23'

    }

    environment {

        SCANNER_HOME=tool 'sonar-scanner'

    }

    stages {

        stage ("clean workspace") {

            steps {

                cleanWs()

            }

        }

        stage ("Git Checkout") {

            steps {

                git 'https://github.com/KastroVKiran/Zomato-Project-Kastro.git'

            }

        }

        stage("Sonarqube Analysis"){

            steps{

                withSonarQubeEnv('sonar-server') {

                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \

                    -Dsonar.projectKey=zomato '''

                }

            }

        }

        stage("Code Quality Gate"){

           steps {

                script {

                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 

                }

            } 

        }

        stage("Install NPM Dependencies") {

            steps {

                sh "npm install"

            }

        }

        stage('OWASP FS SCAN') {

            steps {

                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'

                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'

    }

}

        stage ("Trivy File Scan") {

            steps {

                sh "trivy fs . > trivy.txt"

            }

        }

        stage ("Build Docker Image") {

            steps {

                sh "docker build -t zomato ."

            }

        }

        stage ("Tag & Push to DockerHub") {

            steps {

                script {

                    withDockerRegistry(credentialsId: 'docker') {

                        sh "docker tag zomato ramparsh/zomato:latest "

                        sh "docker push ramparsh/zomato:latest "

                    }

                }

            }

        }

        stage('Docker Scout Image') {

            steps {

                script{

                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){

                       sh 'docker-scout quickview ramparsh/zomato:latest'

                       sh 'docker-scout cves ramparsh/zomato:latest'

                       sh 'docker-scout recommendations ramparsh/zomato:latest'

                   }

                }

            }

        }

        stage ("Deploy to Container") {

            steps {

                sh 'docker run -d --name zomato -p 3000:3000 ramparsh/zomato:latest'

            }

        }

    }

    post {

    always {

        emailext attachLog: true,

            subject: "'${currentBuild.result}'",

            body: """
<html>
<body>
<div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
</div>
<div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
</div>
<div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
</div>
</body>
</html>

            """,

            to: 'imparsh98@gmail.com',

            mimeType: 'text/html',

            attachmentsPattern: 'trivy.txt'

        }

    }

}




############################################

After removing docker scout.

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
 
        stage("Git Checkout") {
            steps {
                git 'https://github.com/Amruskar98/DevOps-Project-Zomato-Parsh.git'
            }
        }
 
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato
                    '''
                }
            }
        }
 
        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
 
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
 
        stage("OWASP Dependency Check Scan") {
    steps {
        // Run OWASP Dependency-Check and force XML + HTML reports
        dependencyCheck additionalArguments: '''
            --scan ./ 
            --disableYarnAudit 
            --disableNodeAudit 
            --format ALL 
            --out .
            -n
        ''', odcInstallation: 'DP-Check'
 
        // Publish the generated XML report
        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
 
        // Optional: list files to confirm report generation
        sh "ls -lh dependency-check-report.* || true"
    }
}
 
        stage("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
 
        stage("Build Docker Image") {
            steps {
                sh "docker build -t zomato4 ."
            }
        }
 
        stage("Docker Hub Login & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh '''
                            docker tag zomato4 ramparsh/zomato4:latest
                            docker push ramparsh/zomato4:latest
                        '''
                    }
                }
            }
        }
 
        stage("Deploy to Container") {
            steps {
                sh 'docker run -d --name zomato4 -p 3000:3000 ramparsh/zomato4:latest'
            }
        }
    }
 
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
<html>
<body>
<div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
</div>
<div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
</div>
<div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
<p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
</div>
</body>
</html>
                """,
                to: 'imparsh98@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt'
        }
    }
}
